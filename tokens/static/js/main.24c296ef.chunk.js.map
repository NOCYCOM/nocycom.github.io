{"version":3,"sources":["App.js","index.js"],"names":["network","ScatterJS","Network","fromJson","blockchain","chainId","host","port","protocol","rpc","JsonRpc","fullhost","plugins","ScatterEOS","scatter","api","App","props","onErrorClick","state","hasError","info","onChangeName","value","replace","setState","tokenName","toUpperCase","onChangeNum","tokenNum","currentAccount","currentPermission","historylist","connect","then","connected","fail","success","login","getinfo","id","console","error","account","name","authority","eos","Api","catch","log","a","history_get_actions","actions","list","map","action_trace","act","push","blocktime","block_time","issuer","data","maximum_supply","this","transact","authorization","actor","permission","to","quantity","memo","blocksBehind","expireSeconds","res","err","JSON","stringify","renderHeader","clear","placeholder","onChange","type","moneyKeyboardAlign","Item","style","width","color","textAlign","onClick","pushtx","size","item","extra","substring","thumb","multipleLine","Brief","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24c296ef.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { List,Toast,InputItem,WhiteSpace } from 'antd-mobile';\nimport ScatterJS from '@scatterjs/core';\nimport ScatterEOS from '@scatterjs/eosjs2';\nimport { JsonRpc, Api } from \"eosjs\";\n\n//import VConsole from \"vconsole\";\n\n//var vConsole = new VConsole();// eslint-disable-line no-unused-vars\n\nconst network = ScatterJS.Network.fromJson({\n  blockchain: \"eos\",\n  chainId: \"d5a3d18fbb3c084e3b1f3fa98c21014b5f3db536cc15d08f9f6479517c6a3d86\",\n  host: \"api.boscore.io\",\n  port: 443,\n  protocol: \"https\"\n});\n\nconst rpc = new JsonRpc(network.fullhost());\nScatterJS.plugins(new ScatterEOS());\nlet scatter = \"\";\nlet api = \"\";\n\nclass App extends Component {  \n  constructor(props){\n    super(props);\n    this.state = {\n      currentAccount:\"未连接\",\n      currentPermission: \"\",\n      tokenName: '',\n      tokenNum: '',\n      hasError:false,\n      historylist:[],\n    };\n  }\n\n  componentDidMount(){\n    ScatterJS.scatter.connect(\"scatter-demo\").then(connected => {\n      if (!connected) {\n        Toast.fail(\"连接钱包失败！\");\n        return false;\n      }\n      Toast.success(\"连接钱包成功！\",2);\n      scatter = ScatterJS.scatter;\n      this.login();\n      this.getinfo();\n    });\n  }\n\n  login(){\n    scatter.login().then(id => {\n          if(!id) return console.error('no identity');\n          const account = ScatterJS.account('eos');\n          this.setState({ currentAccount: account.name, currentPermission: account.authority,}); \n          api = scatter.eos(network, Api, { rpc });         \n        })\n        .catch(error => {\n          Toast.fail(\"获取账号信息失败！\");\n          console.error(error);\n        });\n  }\n\n  getinfo(){\n    console.log(\"get tokens info\");\n    (async ()=>{      \n      const actions = (await rpc.history_get_actions('tokens')).actions\n      let list = [];      \n     actions.map(a => {      \n       if(a.action_trace.act.name === \"create\"){         \n        return list.push({blocktime:a.action_trace.block_time,issuer:a.action_trace.act.data.issuer,maximum_supply:a.action_trace.act.data.maximum_supply});\n       }\n       return a.action_trace.act.name;       \n      });     \n     this.setState({ historylist: list,});\n     console.log(this.state.historylist);     \n    })()\n  }\n\n  pushtx(){\n    if (!this.state.currentAccount) {\n      Toast.fail(\"获取账号信息失败！\");\n      return;\n    }\n    api.transact(\n      {\n        actions: [\n          {\n            account: \"tokens\",\n            name: \"create\",\n            authorization: [\n            {\n              actor: this.state.currentAccount,\n              permission: this.state.currentPermission\n            }\n            ],\n            data: {\n              issuer: this.state.currentAccount,\n              maximum_supply: this.state.tokenNum+\" \"+this.state.tokenName\n              }\n          },{\n            account: \"tokens\",\n            name: \"issue\",\n            authorization: [\n            {\n              actor: this.state.currentAccount,\n              permission: this.state.currentPermission\n            }\n            ],\n            data: {\n              to: this.state.currentAccount,\n              quantity: this.state.tokenNum+\" \"+this.state.tokenName,\n              memo:\"tokens issue\"\n              }\n          }\n          ]\n      },\n        {\n          blocksBehind: 3,\n          expireSeconds: 3000\n        }\n      )\n      .then(res => {\n        Toast.success(\"发送成功!\");\n        this.getinfo();\n      })\n      .catch(err => {\n        Toast.fail(\"发送失败：\" + err);\n        console.log(\"fail\" + JSON.stringify(err));\n      });    \n  }\n  \n  onErrorClick = () => {\n    if (this.state.hasError) {\n      Toast.info(\"Token名称只能输入大写英文字母!\");\n    }\n  }\n\n  onChangeName= (value) => {    \n    if (value.replace(/[^A-Z]/g, '')) {\n      this.setState({\n        hasError: false,\n      });\n    }else{\n      this.setState({\n        hasError: true,\n      });\n    }\n    this.setState({\n      tokenName: value.toUpperCase(),\n    });\n  }\n\n  onChangeNum= (value) => {        \n    this.setState({\n      tokenNum: value,\n    });\n  }\n\n  render(){  \n    return(\n      <div>     \n       <List renderHeader={() => '登录账号：'+this.state.currentAccount}>\n          <InputItem clear placeholder=\"SYS\" error={this.state.hasError}\n            onErrorClick={this.onErrorClick}\n            onChange={this.onChangeName}\n            value={this.state.tokenName} >Token名称</InputItem>\n          <InputItem type=\"money\" moneyKeyboardAlign=\"left\" clear \n          placeholder=\"1000000000.0000\" \n          onChange={this.onChangeNum}\n          value={this.state.tokenNum}>发行总量</InputItem>\n          <List.Item>\n            <div style={{width:'100%',color:'#108ee9',textAlign:'center'}}\n            onClick={() => this.pushtx()}>一键发行</div>\n          </List.Item>\n       </List>\n       <WhiteSpace size='md' />\n       <List renderHeader={() => '通证发行记录'}>\n          {this.state.historylist ? this.state.historylist.map(item => \n          <List.Item extra={item.blocktime.substring(0,10)}  thumb=\"https://zos.alipayobjects.com/rmsportal/dNuvNrtqUztHCwM.png\" multipleLine>\n            {item.maximum_supply}<List.Item.Brief>账号：{item.issuer}</List.Item.Brief>\n          </List.Item>\n          ):<List.Item><p>区块链数据加载中...</p></List.Item>\n        }          \n       </List>       \n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}